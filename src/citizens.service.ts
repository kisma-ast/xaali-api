import { Injectable, Logger } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Citizen } from './citizen.entity';
import { FineTuningService, FineTuningQuery } from './fine-tuning.service'; // Changed import
import { AiQuestion } from './ai-question.entity';
import { Case } from './case.entity';

@Injectable()
export class CitizensService {
  private readonly logger = new Logger(CitizensService.name);

  constructor(
    @InjectRepository(Citizen)
    private citizensRepository: Repository<Citizen>,
    @InjectRepository(AiQuestion)
    private aiQuestionsRepository: Repository<AiQuestion>,
    @InjectRepository(Case)
    private casesRepository: Repository<Case>,
    private readonly fineTuningService: FineTuningService, // Changed to fine-tuning service
  ) {
    this.logger.log('üèõÔ∏è CitizensService initialis√© avec Fine-Tuning'); // Updated log
  }

  async createCitizen(): Promise<Citizen> {
    const citizen = this.citizensRepository.create({
      questionsAsked: 0,
      hasPaid: false,
    });
    return await this.citizensRepository.save(citizen);
  }

  async getCitizen(id: string): Promise<Citizen | null> {
    return await this.citizensRepository.findOne({ where: { id } });
  }

  async canAskQuestion(citizenId: string): Promise<boolean> {
    const citizen = await this.getCitizen(citizenId);
    return citizen !== null && citizen.questionsAsked < 2;
  }

  async askQuestion(citizenId: string, question: string, category?: string): Promise<AiQuestion> {
    const citizen = await this.getCitizen(citizenId);
    if (!citizen || citizen.questionsAsked >= 2) {
      throw new Error('Question limit reached');
    }

    this.logger.log(`üë§ Question citoyen ${citizenId}: "${question}"`);

    try {
      // Use fine-tuning instead of RAG
      const fineTuningQuery: FineTuningQuery = {
        question,
        userId: citizenId,
        context: category,
        category,
      };

      const fineTuningResponse = await this.fineTuningService.processFineTunedQuery(fineTuningQuery);
      
      // Formater la r√©ponse
      const citizenFriendlyResponse = this.formatResponseForCitizen(fineTuningResponse);

      const aiQuestion = this.aiQuestionsRepository.create({
        question,
        answer: citizenFriendlyResponse,
        citizenId,
        metadata: {
          confidence: fineTuningResponse.confidence,
          processingTime: fineTuningResponse.processingTime,
          sourcesCount: 0, // No sources in fine-tuning
        },
      });

      // Incr√©menter le compteur de questions
      citizen.questionsAsked += 1;
      await this.citizensRepository.save(citizen);

      this.logger.log(`‚úÖ R√©ponse fine-tuning g√©n√©r√©e pour citoyen ${citizenId}`);
      return await this.aiQuestionsRepository.save(aiQuestion);

    } catch (error) {
      this.logger.error(`‚ùå Erreur fine-tuning pour citoyen ${citizenId}:`, error);
      
      // Fallback: r√©ponse basique
      const fallbackResponse = `Je rencontre des difficult√©s techniques pour r√©pondre √† votre question "${question}". Veuillez consulter un avocat ou r√©essayer plus tard.`;
      
      const aiQuestion = this.aiQuestionsRepository.create({
        question,
        answer: fallbackResponse,
        citizenId,
        metadata: { error: true },
      });

      citizen.questionsAsked += 1;
      await this.citizensRepository.save(citizen);
      
      return await this.aiQuestionsRepository.save(aiQuestion);
    }
  }

  async getQuestionsHistory(citizenId: string): Promise<AiQuestion[]> {
    return await this.aiQuestionsRepository.find({
      where: { citizenId },
      order: { createdAt: 'DESC' },
    });
  }

  async createCase(citizenId: string, title: string, description: string): Promise<Case> {
    const citizen = await this.getCitizen(citizenId);
    if (!citizen) {
      throw new Error('Citizen not found');
    }

    const case_ = this.casesRepository.create({
      title,
      description,
      citizenId,
      status: 'pending',
      isPaid: false,
      paymentAmount: 5000,
    });

    return await this.casesRepository.save(case_);
  }

  async markAsPaid(citizenId: string, paymentId: string): Promise<void> {
    const citizen = await this.getCitizen(citizenId);
    if (citizen) {
      citizen.hasPaid = true;
      citizen.paymentId = paymentId;
      await this.citizensRepository.save(citizen);
    }
  }

  async getCitizenCases(citizenId: string): Promise<Case[]> {
    return await this.casesRepository.find({
      where: { citizenId },
      relations: ['lawyer'],
      order: { createdAt: 'DESC' },
    });
  }

  // Nouvelle m√©thode pour obtenir des conseils juridiques personnalis√©s
  async getPersonalizedAdvice(citizenId: string, situation: string): Promise<any> {
    this.logger.log(`üéØ Conseil personnalis√© pour citoyen ${citizenId}`);

    try {
      const fineTuningQuery: FineTuningQuery = {
        question: `Conseil juridique pour la situation suivante: ${situation}`,
        userId: citizenId,
        context: 'conseil_personnalise',
        category: 'conseil_personnalise',
      };

      const fineTuningResponse = await this.fineTuningService.processFineTunedQuery(fineTuningQuery);
      
      return {
        advice: fineTuningResponse.answer,
        confidence: fineTuningResponse.confidence,
        sources: [], // No sources in fine-tuning
        nextSteps: fineTuningResponse.answer.nextSteps || [],
        relatedTopics: fineTuningResponse.answer.relatedTopics || [],
      };

    } catch (error) {
      this.logger.error('‚ùå Erreur conseil personnalis√©:', error);
      throw new Error('Impossible de g√©n√©rer un conseil personnalis√©');
    }
  }

  // M√©thode pour formater la r√©ponse fine-tuning pour les citoyens
  private formatResponseForCitizen(fineTuningResponse: any): string {
    const answer = fineTuningResponse.answer;
    
    // En-t√™te fine-tuning visible
    let formattedResponse = `ü§ñ **R√©ponse g√©n√©r√©e par Xaali-AI (Mod√®le Fine-Tuned)**\n`;
    formattedResponse += `üåê *Powered by: Fine-Tuned Model*\n\n`;
    
    formattedResponse += `üìã **${answer.title}**\n\n`;
    formattedResponse += `${answer.content}\n\n`;
    
    if (answer.nextSteps && answer.nextSteps.length > 0) {
      formattedResponse += `‚úÖ **Prochaines √©tapes:**\n`;
      answer.nextSteps.forEach((step: string, index: number) => {
        formattedResponse += `${index + 1}. ${step}\n`;
      });
      formattedResponse += `\n`;
    }
    
    // M√©tadonn√©es fine-tuning visibles
    formattedResponse += `üí° **R√©sum√©:** ${answer.summary}\n\n`;
    formattedResponse += `üéØ **Confiance:** ${answer.confidence}\n`;
    formattedResponse += `‚è±Ô∏è **Temps de traitement:** ${fineTuningResponse.processingTime}ms\n\n`;
    
    formattedResponse += `‚ö†Ô∏è **Important:** Cette r√©ponse est g√©n√©r√©e par un mod√®le d'intelligence artificielle sp√©cialement entra√Æn√© sur le droit s√©n√©galais. Pour des conseils juridiques pr√©cis adapt√©s √† votre situation sp√©cifique, nous vous recommandons de consulter un avocat.\n\n`;
    formattedResponse += `üîÑ *G√©n√©r√© le ${new Date().toLocaleString('fr-FR')} par Xaali Fine-Tuning Model*`;
    
    return formattedResponse;
  }
}