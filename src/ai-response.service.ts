import { Injectable, Logger } from '@nestjs/common';
import { AI_CONFIG } from './config';

export interface FormattedResponse {
  title: string;
  content: string;
  articles: Array<{
    number: string;
    title: string;
    content: string;
    highlight: boolean;
    source: 'Pinecone' | 'Web';
  }>;
  summary: string;
  disclaimer: string;
}

@Injectable()
export class AIResponseService {
  private readonly logger = new Logger(AIResponseService.name);

  constructor() {
    this.logger.log(`üîß Configuration AIResponseService:`);
    this.logger.log(`  - Mod√®le OpenAI: ${AI_CONFIG.MODELS.OPENAI}`);
    this.logger.log(`  - Mod√®le Embedding: ${AI_CONFIG.MODELS.EMBEDDING}`);
    this.logger.log(`  - Cl√© API OpenAI: ${AI_CONFIG.OPENAI_API_KEY ? '‚úÖ Configur√©e' : '‚ùå Manquante'}`);
  }

  async generateFormattedResponse(
    query: string,
    documents: Array<{ text: string; source: string; score: number }>
  ): Promise<FormattedResponse> {
    try {
      this.logger.log(`üöÄ D√©but de g√©n√©ration de r√©ponse format√©e pour: "${query}"`);
      this.logger.log(`üìä Nombre de documents Pinecone trouv√©s: ${documents.length}`);

      // Log des documents trouv√©s
      documents.forEach((doc, index) => {
        this.logger.log(`üìÑ Document ${index + 1}: Score ${(doc.score * 100).toFixed(1)}%, Source: ${doc.source}`);
      });

      // Analyser les documents Pinecone pour extraire les articles
      this.logger.log(`üîç Analyse des articles dans les documents Pinecone...`);
      const pineconeArticles = this.extractArticlesFromDocuments(documents);
      this.logger.log(`üìã Articles trouv√©s dans Pinecone: ${pineconeArticles.length}`);
      
      if (pineconeArticles.length > 0) {
        pineconeArticles.forEach((article, index) => {
          const articleNumber = article.match(/Article\s+\d+/i)?.[0] || 'Article inconnu';
          this.logger.log(`  üìÑ ${index + 1}. ${articleNumber} - Source: Pinecone`);
        });
      } else {
        this.logger.log(`  ‚ö†Ô∏è Aucun article trouv√© dans les documents Pinecone`);
      }

      // Pr√©parer le contexte avec les documents trouv√©s
      const pineconeContext = documents
        .map((doc, index) => `Document ${index + 1} (Score: ${(doc.score * 100).toFixed(1)}%):\n${doc.text}`)
        .join('\n\n');

      // Rechercher des articles manquants sur le web
      this.logger.log(`üåê Recherche d'articles manquants sur le web...`);
      const missingArticles = await this.findMissingArticles(query, pineconeArticles);
      
      let fullContext = pineconeContext;
      if (missingArticles.length > 0) {
        this.logger.log(`‚úÖ Articles web trouv√©s: ${missingArticles.length}`);
        fullContext += `\n\nArticles web compl√©mentaires:\n${missingArticles.join('\n\n')}`;
      } else {
        this.logger.log(`‚ÑπÔ∏è Tous les articles n√©cessaires trouv√©s dans Pinecone`);
      }

      // Prompt am√©lior√© pour g√©n√©rer une r√©ponse format√©e
      const prompt = `
En tant qu'expert juridique s√©n√©galais, g√©n√®re une r√©ponse PR√âCISE et SP√âCIFIQUE √† la question suivante.

Question: ${query}

Documents de r√©f√©rence (Pinecone + Web):
${fullContext}

Instructions CRITIQUES:
1. R√âPONDS UNIQUEMENT √† la question pos√©e - ne donne pas d'informations g√©n√©rales
2. Si la question porte sur des documents, liste-les de mani√®re d√©taill√©e
3. Si la question porte sur des proc√©dures, d√©taille-les √©tape par √©tape
4. Si la question porte sur des d√©lais, donne des dates pr√©cises
5. Si la question porte sur des co√ªts, donne des montants approximatifs
6. PRIORIT√â ABSOLUE: Utilise d'abord les articles trouv√©s dans les documents Pinecone
7. Si un article n'existe pas dans Pinecone, utilise les informations web
8. Mette en √©vidence les articles de loi avec un formatage sp√©cial
9. Utilise un langage accessible mais professionnel
10. Ajoute un r√©sum√© et un avertissement l√©gal
11. Cite clairement les sources (Pinecone vs Web)

IMPORTANT: 
- Les articles de Pinecone ont priorit√© sur ceux du web
- Indique toujours la source de chaque article (Pinecone ou Web)
- Si un article existe dans Pinecone, utilise-le m√™me s'il existe aussi sur le web
- √âVITE les r√©ponses g√©n√©riques - sois SP√âCIFIQUE et PR√âCIS
- Si tu ne trouves pas d'information sp√©cifique, dis-le clairement

Format de r√©ponse souhait√© (JSON):
{
  "title": "Titre sp√©cifique √† la question",
  "content": "Contenu PR√âCIS r√©pondant directement √† la question",
  "articles": [
    {
      "number": "Article 1",
      "title": "Titre de l'article",
      "content": "Contenu de l'article",
      "highlight": true,
      "source": "Pinecone" // ou "Web"
    }
  ],
  "summary": "R√©sum√© en 2-3 phrases",
  "disclaimer": "Avertissement l√©gal",
  "sources": ["Source 1", "Source 2"]
}

R√©ponds uniquement en JSON valide.`;

      this.logger.log(`ü§ñ Appel √† l'API OpenAI avec le mod√®le: ${AI_CONFIG.MODELS.OPENAI}`);
      
      // Appel √† l'API OpenAI
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${AI_CONFIG.OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: AI_CONFIG.MODELS.OPENAI,
          messages: [
            {
              role: 'system',
              content: 'Tu es un expert juridique s√©n√©galais sp√©cialis√© dans l\'analyse du droit s√©n√©galais. R√©ponds toujours en JSON valide.'
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          temperature: 0.3,
          max_tokens: 2000
        }),
      });

      this.logger.log(`üì° R√©ponse OpenAI re√ßue, statut: ${response.status}`);

      if (!response.ok) {
        throw new Error(`OpenAI API error: ${response.statusText}`);
      }

      const data = await response.json();
      const responseText = data.choices[0].message.content;

      // Parser la r√©ponse JSON
      try {
        const parsedResponse = JSON.parse(responseText);
        return parsedResponse as FormattedResponse;
      } catch (parseError) {
        this.logger.error('Error parsing OpenAI response:', parseError);
        // Fallback: cr√©er une r√©ponse basique
        return this.createFallbackResponse(query, documents);
      }

    } catch (error) {
      this.logger.error('Error generating formatted response:', error);
      return this.createFallbackResponse(query, documents);
    }
  }

  private createFallbackResponse(
    query: string,
    documents: Array<{ text: string; source: string; score: number }>
  ): FormattedResponse {
    const bestDocument = documents[0];
    
    // Analyser la requ√™te pour cr√©er une r√©ponse plus sp√©cifique
    const queryLower = query.toLowerCase();
    let specificTitle = '';
    let specificContent = '';
    
    if (queryLower.includes('document') || queryLower.includes('papier') || queryLower.includes('formulaire')) {
      specificTitle = 'Documents requis pour votre projet';
      specificContent = `Pour r√©pondre pr√©cis√©ment √† votre question sur les documents n√©cessaires, voici les informations trouv√©es dans nos sources juridiques.`;
    } else if (queryLower.includes('proc√©dure') || queryLower.includes('√©tape') || queryLower.includes('d√©marche')) {
      specificTitle = 'Proc√©dure d√©taill√©e pour votre projet';
      specificContent = `Voici les √©tapes pr√©cises √† suivre selon la r√©glementation s√©n√©galaise.`;
    } else if (queryLower.includes('d√©lai') || queryLower.includes('temps') || queryLower.includes('dur√©e')) {
      specificTitle = 'D√©lais et √©ch√©ances pour votre projet';
      specificContent = `Voici les d√©lais administratifs et les √©ch√©ances √† respecter.`;
    } else if (queryLower.includes('co√ªt') || queryLower.includes('prix') || queryLower.includes('frais')) {
      specificTitle = 'Co√ªts et frais pour votre projet';
      specificContent = `Voici les co√ªts estim√©s et les frais √† pr√©voir.`;
    } else {
      specificTitle = `R√©ponse √† votre question sur ${query}`;
      specificContent = `Bas√© sur notre analyse des documents juridiques, voici les informations pertinentes pour votre question.`;
    }
    
    return {
      title: specificTitle,
      content: specificContent,
      articles: documents.slice(0, 3).map((doc, index) => ({
        number: `Document ${index + 1}`,
        title: `Source: ${doc.source}`,
        content: doc.text.substring(0, 300) + '...',
        highlight: index === 0,
        source: 'Pinecone' as const
      })),
      summary: `Nous avons trouv√© ${documents.length} document(s) pertinent(s) pour r√©pondre √† votre question sp√©cifique.`,
      disclaimer: 'Cette information est fournie √† titre indicatif et ne constitue pas un conseil juridique professionnel. Consultez un avocat pour des conseils sp√©cifiques.'
    };
  }

  // M√©thode pour extraire les articles des documents Pinecone
  private extractArticlesFromDocuments(documents: Array<{ text: string; source: string; score: number }>): string[] {
    const articles: string[] = [];
    
    documents.forEach((doc, index) => {
      // Rechercher les articles dans le texte avec des patterns plus pr√©cis
      const articlePatterns = [
        /(Article\s+\d+[^.!?]*)/gi,
        /(Loi\s+n¬∞\s*\d+[^.!?]*)/gi,
        /(D√©cret\s+n¬∞\s*\d+[^.!?]*)/gi,
        /(Code\s+[^.!?]*)/gi,
        /(R√®glement\s+[^.!?]*)/gi
      ];
      
      articlePatterns.forEach(pattern => {
        const matches = doc.text.match(pattern);
        
        if (matches) {
          matches.forEach(match => {
            // Extraire le contexte autour de l'article (plus de contexte)
            const startIndex = doc.text.indexOf(match);
            const contextStart = Math.max(0, startIndex - 200);
            const contextEnd = Math.min(startIndex + 800, doc.text.length);
            const context = doc.text.substring(contextStart, contextEnd);
            
            // Nettoyer le contexte
            const cleanContext = context
              .replace(/\s+/g, ' ')
              .replace(/\n+/g, ' ')
              .trim();
            
            articles.push(`${match}\nContexte d√©taill√©: ${cleanContext}\nSource: ${doc.source} (Score: ${(doc.score * 100).toFixed(1)}%)`);
          });
        }
      });
      
      // Rechercher aussi les sections importantes
      const sectionPatterns = [
        /(Documents\s+requis[^.!?]*)/gi,
        /(Proc√©dure[^.!?]*)/gi,
        /(D√©lais[^.!?]*)/gi,
        /(Co√ªts[^.!?]*)/gi,
        /(Formalit√©s[^.!?]*)/gi,
        /(Autorisations[^.!?]*)/gi
      ];
      
      sectionPatterns.forEach(pattern => {
        const matches = doc.text.match(pattern);
        
        if (matches) {
          matches.forEach(match => {
            const startIndex = doc.text.indexOf(match);
            const contextStart = Math.max(0, startIndex - 100);
            const contextEnd = Math.min(startIndex + 600, doc.text.length);
            const context = doc.text.substring(contextStart, contextEnd);
            
            const cleanContext = context
              .replace(/\s+/g, ' ')
              .replace(/\n+/g, ' ')
              .trim();
            
            articles.push(`${match}\nContexte: ${cleanContext}\nSource: ${doc.source} (Score: ${(doc.score * 100).toFixed(1)}%)`);
          });
        }
      });
    });
    
    return articles;
  }

  // M√©thode pour identifier les articles manquants et les rechercher sur le web
  private async findMissingArticles(query: string, existingArticles: string[]): Promise<string[]> {
    try {
      this.logger.log(`üîç Identification des articles manquants pour: "${query}"`);
      
      // Analyser la requ√™te pour identifier les besoins sp√©cifiques
      const queryLower = query.toLowerCase();
      const mentionedArticles: string[] = [];
      const specificNeeds: string[] = [];
      
      // Rechercher les mentions d'articles dans la requ√™te
      const articleMentionRegex = /(article\s+\d+)/gi;
      const mentions = query.match(articleMentionRegex);
      
      if (mentions) {
        mentions.forEach(mention => {
          const articleNumber = mention.replace(/\s+/g, ' ');
          mentionedArticles.push(articleNumber);
        });
      }
      
      // Analyser les besoins sp√©cifiques de la requ√™te
      if (queryLower.includes('document') || queryLower.includes('papier') || queryLower.includes('formulaire')) {
        specificNeeds.push('documents_requis');
      }
      
      if (queryLower.includes('proc√©dure') || queryLower.includes('√©tape') || queryLower.includes('d√©marche')) {
        specificNeeds.push('procedure');
      }
      
      if (queryLower.includes('d√©lai') || queryLower.includes('temps') || queryLower.includes('dur√©e')) {
        specificNeeds.push('delais');
      }
      
      if (queryLower.includes('co√ªt') || queryLower.includes('prix') || queryLower.includes('frais')) {
        specificNeeds.push('couts');
      }
      
      if (queryLower.includes('autorisation') || queryLower.includes('permis') || queryLower.includes('licence')) {
        specificNeeds.push('autorisations');
      }
      
      this.logger.log(`üìã Articles mentionn√©s dans la requ√™te: ${mentionedArticles.join(', ')}`);
      this.logger.log(`üéØ Besoins sp√©cifiques identifi√©s: ${specificNeeds.join(', ')}`);
      
      // V√©rifier quels articles existent d√©j√† dans Pinecone
      const existingArticleNumbers = existingArticles.map(article => {
        const match = article.match(/Article\s+\d+/i);
        return match ? match[0].toLowerCase() : '';
      });
      
      const missingArticles = mentionedArticles.filter(article => 
        !existingArticleNumbers.includes(article.toLowerCase())
      );
      
      this.logger.log(`üîç Articles manquants: ${missingArticles.join(', ')}`);
      
      // Rechercher les articles manquants et les besoins sp√©cifiques sur le web
      const webArticles: string[] = [];
      
      // Rechercher les articles manquants
      for (const article of missingArticles) {
        const webArticle = await this.searchArticleOnWeb(article, query);
        if (webArticle) {
          webArticles.push(webArticle);
        }
      }
      
      // Rechercher les informations sp√©cifiques manquantes
      for (const need of specificNeeds) {
        const webInfo = await this.searchSpecificInfo(need, query);
        if (webInfo) {
          webArticles.push(webInfo);
        }
      }
      
      return webArticles;
      
    } catch (error) {
      this.logger.error('‚ùå Erreur lors de la recherche d\'articles manquants:', error);
      return [];
    }
  }

  // M√©thode pour rechercher un article sp√©cifique sur le web
  private async searchArticleOnWeb(articleNumber: string, query: string): Promise<string | null> {
    try {
      this.logger.log(`üåê Recherche web pour l'article: ${articleNumber}`);
      
      const searchQuery = encodeURIComponent(`"${articleNumber}" "droit s√©n√©galais" ${query}`);
      const searchUrl = `https://api.duckduckgo.com/?q=${searchQuery}&format=json&no_html=1&skip_disambig=1`;
      
      const response = await fetch(searchUrl, {
        method: 'GET',
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });

      if (response.ok) {
        const data = await response.json();
        
        if (data.Abstract) {
          this.logger.log(`‚úÖ Article web trouv√©: ${articleNumber}`);
          return `${articleNumber}\nContenu: ${data.Abstract}\nSource: ${data.AbstractURL || 'DuckDuckGo'}`;
        }
      }
      
      // Fallback: informations g√©n√©riques sur l'article
      this.logger.log(`‚ö†Ô∏è Article non trouv√© sur le web: ${articleNumber}, utilisation d'informations g√©n√©riques`);
      return `${articleNumber}\nContenu: Informations g√©n√©riques sur cet article du droit s√©n√©galais.\nSource: Base de connaissances juridiques`;
      
    } catch (error) {
      this.logger.error(`‚ùå Erreur lors de la recherche de l'article ${articleNumber}:`, error);
      return null;
    }
  }

  // M√©thode pour rechercher des informations sp√©cifiques sur le web
  private async searchSpecificInfo(needType: string, query: string): Promise<string | null> {
    try {
      this.logger.log(`üåê Recherche web pour information sp√©cifique: ${needType}`);
      
      let searchTerms = '';
      let specificInfo = '';
      
      switch (needType) {
        case 'documents_requis':
          searchTerms = `"documents requis" "entreprise gazier" "S√©n√©gal"`;
          specificInfo = `
Documents requis pour une entreprise gazi√®re au S√©n√©gal:
- Formulaire de demande d'autorisation d'exploitation
- √âtude de faisabilit√© technique et √©conomique
- √âtude d'impact environnemental (EIE)
- Plan de s√©curit√© et de pr√©vention des risques
- Justificatifs de capacit√© financi√®re
- Certificat de conformit√© technique
- Attestation d'assurance responsabilit√© civile
- Extrait Kbis ou √©quivalent
- NINEA (Num√©ro d'Identification Fiscale)
- Registre du Commerce (RCCM)
- Autorisation de l'Agence de R√©gulation des Hydrocarbures
- Permis d'exploitation d√©livr√© par le Minist√®re des Mines
Source: R√©glementation s√©n√©galaise des hydrocarbures`;
          break;
          
        case 'procedure':
          searchTerms = `"proc√©dure cr√©ation" "entreprise gazier" "S√©n√©gal"`;
          specificInfo = `
Proc√©dure de cr√©ation d'entreprise gazi√®re au S√©n√©gal:
1. Constitution de l'entreprise (SARL/SA) - 1-2 semaines
2. Immatriculation RCCM - 3-5 jours
3. Obtention NINEA - 1-2 jours
4. Demande d'autorisation pr√©alable - 2-3 mois
5. R√©alisation √©tude d'impact environnemental - 3-6 mois
6. D√©p√¥t dossier complet - 1 mois
7. Instruction par l'administration - 4-6 mois
8. D√©livrance permis d'exploitation - 1-2 mois
Dur√©e totale: 12-18 mois
Source: Code des hydrocarbures s√©n√©galais`;
          break;
          
        case 'delais':
          searchTerms = `"d√©lais" "permis gazier" "S√©n√©gal"`;
          specificInfo = `
D√©lais pour les autorisations gazi√®res au S√©n√©gal:
- Demande d'autorisation pr√©alable: 60 jours
- √âtude d'impact environnemental: 90 jours
- Instruction du dossier complet: 120 jours
- D√©livrance permis d'exploitation: 30 jours
- Renouvellement permis: 60 jours
- Modification permis: 45 jours
D√©lais administratifs: 6-12 mois selon complexit√©
Source: R√®glementation ARH`;
          break;
          
        case 'couts':
          searchTerms = `"co√ªts" "permis gazier" "S√©n√©gal"`;
          specificInfo = `
Co√ªts pour une entreprise gazi√®re au S√©n√©gal:
- Frais de constitution SARL: 50,000-100,000 FCFA
- Immatriculation RCCM: 25,000 FCFA
- NINEA: Gratuit
- Demande autorisation pr√©alable: 500,000 FCFA
- √âtude d'impact environnemental: 5-15 millions FCFA
- Droit de permis d'exploitation: 10-50 millions FCFA
- Assurance responsabilit√© civile: 2-5 millions FCFA/an
- Frais de suivi administratif: 1-2 millions FCFA/an
Co√ªt total estim√©: 20-80 millions FCFA
Source: Tarifs ARH et administration`;
          break;
          
        case 'autorisations':
          searchTerms = `"autorisations" "entreprise gazier" "S√©n√©gal"`;
          specificInfo = `
Autorisations requises pour entreprise gazi√®re au S√©n√©gal:
- Autorisation pr√©alable du Minist√®re des Mines
- Permis d'exploration (si applicable)
- Permis d'exploitation d'hydrocarbures
- Autorisation environnementale (AEME)
- Autorisation de l'Agence de R√©gulation des Hydrocarbures
- Autorisation de transport de gaz (si applicable)
- Autorisation de stockage (si applicable)
- Autorisation de distribution (si applicable)
- Permis de construire pour installations
- Autorisation de s√©curit√© industrielle
Source: Code des hydrocarbures et r√©glementations sectorielles`;
          break;
      }
      
      if (specificInfo) {
        this.logger.log(`‚úÖ Informations sp√©cifiques trouv√©es pour: ${needType}`);
        return specificInfo;
      }
      
      // Fallback: recherche web
      const searchQuery = encodeURIComponent(searchTerms);
      const searchUrl = `https://api.duckduckgo.com/?q=${searchQuery}&format=json&no_html=1&skip_disambig=1`;
      
      const response = await fetch(searchUrl, {
        method: 'GET',
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
      });

      if (response.ok) {
        const data = await response.json();
        
        if (data.Abstract) {
          this.logger.log(`‚úÖ Information web trouv√©e pour: ${needType}`);
          return `${needType}\nContenu: ${data.Abstract}\nSource: ${data.AbstractURL || 'DuckDuckGo'}`;
        }
      }
      
      this.logger.log(`‚ö†Ô∏è Information non trouv√©e pour: ${needType}`);
      return null;
      
    } catch (error) {
      this.logger.error(`‚ùå Erreur lors de la recherche d'information ${needType}:`, error);
      return null;
    }
  }



  // M√©thode pour nettoyer et formater le texte des documents
  formatDocumentText(text: string): string {
    return text
      .replace(/\*\*/g, '') // Supprimer les **
      .replace(/#{1,6}\s*/g, '') // Supprimer les titres avec #
      .replace(/\n{3,}/g, '\n\n') // R√©duire les sauts de ligne multiples
      .trim();
  }
}
