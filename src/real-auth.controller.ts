import { Controller, Post, Body, Logger, Get, Param } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { ObjectId } from 'mongodb';
import { Lawyer } from './lawyer.entity';
import { Case } from './case.entity';
import { Citizen } from './citizen.entity';
import { NotificationService } from './notification.service';
import { FineTuningService } from './fine-tuning.service';
import { EmailService } from './email.service';
import * as bcrypt from 'bcrypt';

@Controller('real-auth')
export class RealAuthController {
  private readonly logger = new Logger(RealAuthController.name);

  constructor(
    @InjectRepository(Lawyer)
    private lawyerRepository: Repository<Lawyer>,
    @InjectRepository(Case)
    private caseRepository: Repository<Case>,
    @InjectRepository(Citizen)
    private citizenRepository: Repository<Citizen>,
    private notificationService: NotificationService,
    private fineTuningService: FineTuningService,
    private emailService: EmailService,
  ) {}

  @Post('register')
  async registerLawyer(@Body() registerDto: any) {
    console.log('üîç [REAL-AUTH] Tentative d\'inscription avocat');
    console.log('üìã [REAL-AUTH] Donn√©es re√ßues:', JSON.stringify(registerDto, null, 2));
    
    try {
      const existingLawyer = await this.lawyerRepository.findOne({
        where: { email: registerDto.email }
      });

      if (existingLawyer) {
        return { success: false, message: 'Cet email est d√©j√† utilis√©' };
      }

      const hashedPassword = await bcrypt.hash(registerDto.password, 10);

      const lawyer = this.lawyerRepository.create({
        name: registerDto.name,
        email: registerDto.email,
        password: hashedPassword,
        specialty: registerDto.specialty,
        phone: registerDto.phone || '+221 77 000 00 00',
        experience: registerDto.experience || '1 an',
        lawFirm: registerDto.lawFirm || 'Cabinet Ind√©pendant',
        barNumber: `BAR${Date.now()}`,
        isActive: true,
        createdAt: new Date(),
      });

      const savedLawyer = await this.lawyerRepository.save(lawyer);
      const { password, ...lawyerData } = savedLawyer;
      
      console.log('‚úÖ [REAL-AUTH] Avocat cr√©√© avec succ√®s:', savedLawyer.id);
      console.log('üìÑ [REAL-AUTH] Donn√©es sauvegard√©es:', JSON.stringify(lawyerData, null, 2));

      return {
        success: true,
        lawyer: lawyerData,
        token: `lawyer_${savedLawyer.id}_${Date.now()}`
      };
    } catch (error) {
      console.error('‚ùå [REAL-AUTH] Erreur inscription avocat:', error);
      this.logger.error('Erreur inscription avocat:', error);
      return { success: false, message: 'Erreur lors de l\'inscription: ' + error.message };
    }
  }

  @Post('login')
  async loginLawyer(@Body() loginDto: { email: string; password: string }) {
    console.log('üîç [REAL-AUTH] Tentative de connexion avocat');
    console.log('üìß [REAL-AUTH] Email:', loginDto.email);
    
    try {
      const lawyer = await this.lawyerRepository.findOne({
        where: { email: loginDto.email }
      });

      if (!lawyer) {
        return { success: false, message: 'Email ou mot de passe incorrect' };
      }

      const isPasswordValid = await bcrypt.compare(loginDto.password, lawyer.password);
      if (!isPasswordValid) {
        return { success: false, message: 'Email ou mot de passe incorrect' };
      }

      const { password, ...lawyerData } = lawyer;

      console.log('‚úÖ [REAL-AUTH] Connexion avocat r√©ussie:', lawyer.id);
      
      return {
        success: true,
        lawyer: lawyerData,
        token: `lawyer_${lawyer.id}_${Date.now()}`
      };
    } catch (error) {
      console.error('‚ùå [REAL-AUTH] Erreur connexion avocat:', error);
      this.logger.error('Erreur connexion avocat:', error);
      return { success: false, message: 'Erreur de connexion: ' + error.message };
    }
  }

  @Post('citizen-register')
  async registerCitizen(@Body() registerDto: any) {
    try {
      const existingCitizen = await this.citizenRepository.findOne({
        where: { email: registerDto.email }
      });

      if (existingCitizen) {
        return { success: false, message: 'Cet email est d√©j√† utilis√©' };
      }

      const hashedPassword = await bcrypt.hash(registerDto.password, 10);

      const citizen = this.citizenRepository.create({
        name: registerDto.name,
        email: registerDto.email,
        password: hashedPassword,
        phone: registerDto.phone || '+221 77 000 00 00',
        isActive: true,
        createdAt: new Date(),
      });

      const savedCitizen = await this.citizenRepository.save(citizen);
      const { password, ...citizenData } = savedCitizen;

      return {
        success: true,
        citizen: citizenData,
        token: `citizen_${savedCitizen.id}_${Date.now()}`
      };
    } catch (error) {
      this.logger.error('Erreur inscription citoyen:', error);
      return { success: false, message: 'Erreur lors de l\'inscription' };
    }
  }

  @Post('citizen-login')
  async loginCitizen(@Body() loginDto: { email: string; password: string }) {
    try {
      const citizen = await this.citizenRepository.findOne({
        where: { email: loginDto.email }
      });

      if (!citizen) {
        return { success: false, message: 'Email ou mot de passe incorrect' };
      }

      const isPasswordValid = await bcrypt.compare(loginDto.password, citizen.password);
      if (!isPasswordValid) {
        return { success: false, message: 'Email ou mot de passe incorrect' };
      }

      const { password, ...citizenData } = citizen;

      return {
        success: true,
        citizen: citizenData,
        token: `citizen_${citizen.id}_${Date.now()}`
      };
    } catch (error) {
      this.logger.error('Erreur connexion citoyen:', error);
      return { success: false, message: 'Erreur de connexion' };
    }
  }

  @Post('case-create')
  async createCase(@Body() caseDto: any) {
    console.log('üÜï [REAL-AUTH] Cr√©ation d\'un nouveau cas');
    console.log('üìã [REAL-AUTH] Donn√©es du cas:', JSON.stringify(caseDto, null, 2));
    
    try {
      const newCase = this.caseRepository.create({
        title: caseDto.title || 'Demande de consultation juridique',
        description: caseDto.description || 'Le client souhaite une consultation juridique.',
        category: caseDto.category || 'consultation-generale',
        citizenId: caseDto.citizenId,
        citizenName: caseDto.citizenName || null,
        citizenPhone: caseDto.citizenPhone || null,
        status: 'pending',
        urgency: caseDto.urgency || 'normal',
        estimatedTime: caseDto.estimatedTime || 30,
        createdAt: new Date(),
      });

      const savedCase = await this.caseRepository.save(newCase);
      console.log('‚úÖ [REAL-AUTH] Cas sauvegard√©:', savedCase.id);

      // Notifier tous les avocats actifs via le service de notification
      const notificationResult = await this.notificationService.notifyNewCase(savedCase);
      console.log('üì¢ [REAL-AUTH] Notification envoy√©e √†', notificationResult.notifiedLawyers, 'avocats');

      this.logger.log(`Nouveau cas cr√©√©: ${savedCase.id}`);

      return {
        success: true,
        case: savedCase,
        notificationResult: notificationResult
      };
    } catch (error) {
      console.error('‚ùå [REAL-AUTH] Erreur cr√©ation cas:', error);
      this.logger.error('Erreur cr√©ation cas:', error);
      return { success: false, message: 'Erreur lors de la cr√©ation du cas: ' + error.message };
    }
  }

  // Endpoint sp√©cial pour cr√©er un cas apr√®s paiement r√©ussi
  @Post('case-create-after-payment')
  async createCaseAfterPayment(@Body() paymentData: any) {
    console.log('üí≥ [REAL-AUTH] Cr√©ation de cas apr√®s paiement r√©ussi');
    console.log('üí∞ [REAL-AUTH] Donn√©es de paiement:', JSON.stringify(paymentData, null, 2));
    
    try {
      // G√©n√©rer un titre intelligent avec l'IA fine-tun√©e
      const generateAITitle = async (question: string, category: string): Promise<string> => {
        try {
          console.log('ü§ñ [REAL-AUTH] G√©n√©ration de titre IA pour:', question);
          
          const titleResponse = await this.fineTuningService.processFineTunedQuery({
            question: `G√©n√®re un titre court et pr√©cis (maximum 8 mots) pour cette consultation juridique: "${question}". Cat√©gorie: ${category}. Le titre doit √™tre professionnel et indiquer clairement le type de probl√®me juridique.`,
            category: category,
            context: 'title_generation'
          });
          
          // Extraire le titre de la r√©ponse IA
          let aiTitle = titleResponse.answer?.title || titleResponse.answer?.content || '';
          
          // Nettoyer le titre (supprimer guillemets, points, etc.)
          aiTitle = aiTitle.replace(/["'`]/g, '').replace(/\.$/, '').trim();
          
          // V√©rifier que le titre n'est pas trop long
          if (aiTitle.length > 80) {
            aiTitle = aiTitle.substring(0, 77) + '...';
          }
          
          console.log('‚úÖ [REAL-AUTH] Titre IA g√©n√©r√©:', aiTitle);
          return aiTitle || this.getFallbackTitle(question, category);
          
        } catch (error) {
          console.error('‚ùå [REAL-AUTH] Erreur g√©n√©ration titre IA:', error);
          return this.getFallbackTitle(question, category);
        }
      };
      
      const explicitTitle = await generateAITitle(paymentData.clientQuestion || '', paymentData.category || 'consultation-generale');
      
      // G√©n√©rer une r√©ponse IA simul√©e bas√©e sur la cat√©gorie
      const aiResponses: { [key: string]: string } = {
        'divorce': 'Selon l\'article 229 du Code civil, le divorce peut √™tre prononc√© en cas de rupture irr√©m√©diable du lien conjugal. Je recommande de rassembler tous les documents relatifs aux biens communs et de privil√©gier une proc√©dure amiable si possible.',
        'succession': 'D\'apr√®s les articles 720 et suivants du Code civil, la succession s\'ouvre au lieu du dernier domicile du d√©funt. Il est essentiel d\'√©tablir un inventaire des biens et de v√©rifier l\'existence d\'un testament.',
        'contrat': 'L\'article 1134 du Code civil stipule que les conventions l√©galement form√©es tiennent lieu de loi √† ceux qui les ont faites. En cas de non-respect, vous pouvez demander l\'ex√©cution forc√©e ou des dommages-int√©r√™ts.',
        'travail': 'Le Code du travail prot√®ge les salari√©s contre les licenciements abusifs. Selon l\'article L1232-1, tout licenciement doit reposer sur une cause r√©elle et s√©rieuse. Je vous conseille de rassembler tous les √©l√©ments de preuve.',
        'foncier': 'Le droit de propri√©t√© est prot√©g√© par l\'article 544 du Code civil. Pour les conflits fonciers, il faut v√©rifier les titres de propri√©t√© et proc√©der si n√©cessaire √† un bornage contradictoire.',
        'consultation-generale': 'Apr√®s analyse de votre situation, plusieurs options s\'offrent √† vous selon le droit applicable. Je recommande une approche progressive en privil√©giant d\'abord les solutions amiables avant d\'envisager une proc√©dure judiciaire.'
      };
      
      const aiResponse = aiResponses[paymentData.category] || aiResponses['consultation-generale'];
      
      // Cr√©er le cas avec les informations du paiement
      const caseData = {
        title: explicitTitle,
        description: `Question du client: ${paymentData.clientQuestion || 'Le client souhaite une consultation juridique sp√©cialis√©e.'}\n\nCat√©gorie: ${paymentData.category || 'consultation-generale'}\nMontant pay√©: ${paymentData.amount || '10000'} FCFA`,
        category: paymentData.category || 'consultation-generale',
        citizenName: paymentData.clientName || null,
        citizenPhone: paymentData.clientPhone || null,
        citizenId: paymentData.clientId || null,
        urgency: paymentData.urgency || 'normal',
        estimatedTime: paymentData.estimatedTime || 30,
        paymentId: paymentData.paymentId,
        paymentAmount: paymentData.amount,
        aiResponse: aiResponse,
        clientQuestion: paymentData.clientQuestion || 'Question non sp√©cifi√©e'
      };
      
      return await this.createCase(caseData);
    } catch (error) {
      console.error('‚ùå [REAL-AUTH] Erreur cr√©ation cas apr√®s paiement:', error);
      return { success: false, message: 'Erreur lors de la cr√©ation du cas apr√®s paiement: ' + error.message };
    }
  }

  @Get('cases/pending')
  async getPendingCases() {
    try {
      // R√©cup√©rer uniquement les cas pay√©s et en attente
      const cases = await this.caseRepository.find({
        where: { 
          status: 'pending'
        },
        order: { createdAt: 'DESC' }
      });
      
      // Filtrer les cas pay√©s uniquement (exclure isPaid:false et status:unpaid)
      const paidCases = cases.filter(c => 
        c.paymentId != null && 
        c.isPaid !== false && 
        c.status !== 'unpaid'
      );

      return {
        success: true,
        cases: paidCases
      };
    } catch (error) {
      this.logger.error('Erreur r√©cup√©ration cas:', error);
      return { success: false, message: 'Erreur lors de la r√©cup√©ration des cas' };
    }
  }

  @Post('case-accept/:id')
  async acceptCase(@Param('id') caseId: string, @Body() body: { lawyerId: string }) {
    try {
      console.log('üîç [REAL-AUTH] Tentative d\'acceptation du cas:', caseId);
      console.log('üë®‚öñÔ∏è [REAL-AUTH] ID Avocat:', body.lawyerId);
      
      const caseToUpdate = await this.caseRepository.findOne({
        where: { _id: new ObjectId(caseId) }
      });

      if (!caseToUpdate) {
        return { success: false, message: 'Cas non trouv√©' };
      }

      if (caseToUpdate.status !== 'pending') {
        return { success: false, message: 'Ce cas a d√©j√† √©t√© pris en charge' };
      }

      caseToUpdate.status = 'accepted';
      caseToUpdate.lawyerId = body.lawyerId;
      caseToUpdate.acceptedAt = new Date();

      await this.caseRepository.save(caseToUpdate);
      
      console.log('‚úÖ [REAL-AUTH] Cas accept√© avec succ√®s:', caseId);

      // Notifier que le cas a √©t√© accept√©
      await this.notificationService.notifyCaseAccepted(caseId, body.lawyerId);

      return {
        success: true,
        case: caseToUpdate
      };
    } catch (error) {
      this.logger.error('Erreur acceptation cas:', error);
      return { success: false, message: 'Erreur lors de l\'acceptation du cas' };
    }
  }

  @Get('lawyer-cases/:id')
  async getLawyerCases(@Param('id') lawyerId: string) {
    try {
      const cases = await this.caseRepository.find({
        where: { lawyerId: lawyerId },
        order: { createdAt: 'DESC' }
      });

      return {
        success: true,
        cases: cases
      };
    } catch (error) {
      this.logger.error('Erreur r√©cup√©ration cas avocat:', error);
      return { success: false, message: 'Erreur lors de la r√©cup√©ration des cas' };
    }
  }

  @Get('cases/unpaid')
  async getUnpaidCases() {
    try {
      const unpaidCases = await this.caseRepository.find({
        where: { 
          status: 'unpaid'
        },
        order: { createdAt: 'DESC' }
      });

      return {
        success: true,
        cases: unpaidCases
      };
    } catch (error) {
      this.logger.error('Erreur r√©cup√©ration cas non pay√©s:', error);
      return { success: false, message: 'Erreur lors de la r√©cup√©ration des cas non pay√©s' };
    }
  }

  @Get('cases/accepted')
  async getAllAcceptedCases() {
    try {
      const acceptedCases = await this.caseRepository.find({
        where: { 
          status: 'accepted'
        },
        order: { acceptedAt: 'DESC' }
      });

      console.log('üìã [REAL-AUTH] Cas accept√©s trouv√©s:', acceptedCases.length);
      console.log('üìã [REAL-AUTH] D√©tails des cas:', acceptedCases.map(c => ({ id: c.id, _id: c._id, lawyerId: c.lawyerId, status: c.status })));

      return {
        success: true,
        cases: acceptedCases
      };
    } catch (error) {
      this.logger.error('Erreur r√©cup√©ration cas accept√©s:', error);
      return { success: false, message: 'Erreur lors de la r√©cup√©ration des cas accept√©s' };
    }
  }

  @Get('cases/accepted/:lawyerId')
  async getAcceptedCasesByLawyer(@Param('lawyerId') lawyerId: string) {
    try {
      console.log('üîç [REAL-AUTH] Recherche cas accept√©s pour avocat:', lawyerId);
      
      const acceptedCases = await this.caseRepository.find({
        where: { 
          status: 'accepted',
          lawyerId: lawyerId
        },
        order: { acceptedAt: 'DESC' }
      });

      console.log('üìã [REAL-AUTH] Cas accept√©s trouv√©s pour avocat', lawyerId, ':', acceptedCases.length);

      return {
        success: true,
        cases: acceptedCases
      };
    } catch (error) {
      this.logger.error('Erreur r√©cup√©ration cas accept√©s par avocat:', error);
      return { success: false, message: 'Erreur lors de la r√©cup√©ration des cas accept√©s' };
    }
  }

  // Endpoints pour les notaires
  @Post('notary-register')
  async registerNotary(@Body() registerDto: any) {
    try {
      const existingLawyer = await this.lawyerRepository.findOne({
        where: { email: registerDto.email }
      });

      if (existingLawyer) {
        return { success: false, message: 'Cet email est d√©j√† utilis√©' };
      }

      const hashedPassword = await bcrypt.hash(registerDto.password, 10);

      const notary = this.lawyerRepository.create({
        name: registerDto.name,
        email: registerDto.email,
        password: hashedPassword,
        specialty: registerDto.specialty,
        phone: registerDto.phone || '+221 77 000 00 00',
        experience: registerDto.experience || '1 an',
        lawFirm: registerDto.lawFirm || '√âtude Notariale',
        barNumber: `NOT${Date.now()}`,
        isActive: true,
        createdAt: new Date(),
      });

      const savedNotary = await this.lawyerRepository.save(notary);
      const { password, ...notaryData } = savedNotary;

      return {
        success: true,
        notary: notaryData,
        token: `notary_${savedNotary.id}_${Date.now()}`
      };
    } catch (error) {
      this.logger.error('Erreur inscription notaire:', error);
      return { success: false, message: 'Erreur lors de l\'inscription' };
    }
  }

  @Post('notary-login')
  async loginNotary(@Body() loginDto: { email: string; password: string }) {
    try {
      const notary = await this.lawyerRepository.findOne({
        where: { email: loginDto.email }
      });

      if (!notary) {
        return { success: false, message: 'Email ou mot de passe incorrect' };
      }

      const isPasswordValid = await bcrypt.compare(loginDto.password, notary.password);
      if (!isPasswordValid) {
        return { success: false, message: 'Email ou mot de passe incorrect' };
      }

      const { password, ...notaryData } = notary;

      return {
        success: true,
        notary: notaryData,
        token: `notary_${notary.id}_${Date.now()}`
      };
    } catch (error) {
      this.logger.error('Erreur connexion notaire:', error);
      return { success: false, message: 'Erreur de connexion' };
    }
  }

  // Endpoints pour les huissiers
  @Post('bailiff-register')
  async registerBailiff(@Body() registerDto: any) {
    try {
      const existingLawyer = await this.lawyerRepository.findOne({
        where: { email: registerDto.email }
      });

      if (existingLawyer) {
        return { success: false, message: 'Cet email est d√©j√† utilis√©' };
      }

      const hashedPassword = await bcrypt.hash(registerDto.password, 10);

      const bailiff = this.lawyerRepository.create({
        name: registerDto.name,
        email: registerDto.email,
        password: hashedPassword,
        specialty: registerDto.specialty,
        phone: registerDto.phone || '+221 77 000 00 00',
        experience: registerDto.experience || '1 an',
        lawFirm: registerDto.lawFirm || '√âtude d\'Huissier',
        barNumber: `HUI${Date.now()}`,
        isActive: true,
        createdAt: new Date(),
      });

      const savedBailiff = await this.lawyerRepository.save(bailiff);
      const { password, ...bailiffData } = savedBailiff;

      return {
        success: true,
        bailiff: bailiffData,
        token: `bailiff_${savedBailiff.id}_${Date.now()}`
      };
    } catch (error) {
      this.logger.error('Erreur inscription huissier:', error);
      return { success: false, message: 'Erreur lors de l\'inscription' };
    }
  }

  @Post('bailiff-login')
  async loginBailiff(@Body() loginDto: { email: string; password: string }) {
    try {
      const bailiff = await this.lawyerRepository.findOne({
        where: { email: loginDto.email }
      });

      if (!bailiff) {
        return { success: false, message: 'Email ou mot de passe incorrect' };
      }

      const isPasswordValid = await bcrypt.compare(loginDto.password, bailiff.password);
      if (!isPasswordValid) {
        return { success: false, message: 'Email ou mot de passe incorrect' };
      }

      const { password, ...bailiffData } = bailiff;

      return {
        success: true,
        bailiff: bailiffData,
        token: `bailiff_${bailiff.id}_${Date.now()}`
      };
    } catch (error) {
      this.logger.error('Erreur connexion huissier:', error);
      return { success: false, message: 'Erreur de connexion' };
    }
  }

  // Endpoints Google OAuth (placeholders)
  @Post('google-auth')
  async googleAuthLawyer(@Body() body: any) {
    return { success: false, message: 'Google OAuth √† impl√©menter' };
  }

  @Post('notary-google-auth')
  async googleAuthNotary(@Body() body: any) {
    return { success: false, message: 'Google OAuth √† impl√©menter' };
  }

  @Post('bailiff-google-auth')
  async googleAuthBailiff(@Body() body: any) {
    return { success: false, message: 'Google OAuth √† impl√©menter' };
  }

  // M√©thode helper pour les titres de fallback
  private getFallbackTitle(question: string, category: string): string {
    const categoryTitles: { [key: string]: string[] } = {
      'divorce': [
        'Demande de divorce pour m√©sentente grave',
        'Proc√©dure de divorce avec partage des biens',
        'Divorce contentieux - Garde d\'enfants'
      ],
      'succession': [
        'Conflit successoral entre h√©ritiers',
        'Contestation de testament familial',
        'Partage de succession immobili√®re'
      ],
      'contrat': [
        'Rupture de contrat commercial',
        'Non-respect d\'obligations contractuelles',
        'Litige sur clauses contractuelles'
      ],
      'travail': [
        'Licenciement abusif - Demande d\'indemnisation',
        'Conflit avec employeur sur salaire',
        'Harc√®lement au travail - Recours'
      ],
      'foncier': [
        'Conflit de bornage entre voisins',
        'Contestation de titre de propri√©t√©',
        'Probl√®me d\'occupation ill√©gale'
      ]
    };
    
    const titles = categoryTitles[category] || [
      'Consultation juridique sp√©cialis√©e',
      'Demande de conseil juridique',
      'Probl√®me juridique √† r√©soudre'
    ];
    
    // S√©lection bas√©e sur des mots-cl√©s
    const questionLower = question.toLowerCase();
    if (questionLower.includes('licenci')) return 'Licenciement abusif - Demande d\'indemnisation';
    if (questionLower.includes('divorce')) return 'Demande de divorce pour m√©sentente grave';
    if (questionLower.includes('h√©rit')) return 'Conflit successoral entre h√©ritiers';
    if (questionLower.includes('contrat')) return 'Rupture de contrat commercial';
    if (questionLower.includes('terrain')) return 'Conflit de bornage entre voisins';
    
    return titles[Math.floor(Math.random() * titles.length)];
  }
}